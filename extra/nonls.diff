--- kalendas.in	2018-07-13 19:33:25.403852681 -0500
+++ kalendas.en	2018-07-13 22:55:59.184074524 -0500
@@ -41,15 +41,15 @@
 use Getopt::Long;
 
 # --- ENABLE NLS ---
-use Locale::TextDomain ("@PACKAGE@" => "@localedir@");
-use POSIX qw(setlocale);
-binmode STDOUT, ':raw';      # Needed to make it work in UTF-8 locales in Perl-5.8.
+# use Locale::TextDomain ("@PACKAGE@" => "@localedir@");
+# use POSIX qw(setlocale);
+# binmode STDOUT, ':raw';      # Needed to make it work in UTF-8 locales in Perl-5.8.
 
 #------------------------------
 # < Plataforma y Perl version >
 #------------------------------
 my $PROG  = "kalendas";
-$] > 5 or die __x ("{PROG} requires Perl 5.\n", PROG => $PROG);
+$] > 5 or die "$PROG requires Perl 5.\n";
 $so = $^O;
 
 #-----------------------------
@@ -59,7 +59,7 @@
 my $autor = "Miguel Molina";
 my ($nombre, $verno, $data) = ( $idrcs =~ /: (\D+),v ([\d.]+) (\d+\/\d+\/\d+)/ );
 my $InfoId = "$nombre - $verno (SO: $so)";
-my $InfoAp = __x ("Written by {autor}, {data}, <mmolina.unphysics\@gmail.com>.", 'autor' => $autor, 'data' => $data);
+my $InfoAp = "Written by $autor, $data, <mmolina.unphysics\@gmail.com>.";
 
 #-----------------------------------
 # < Opciones por linea de comandos > 
@@ -89,9 +89,9 @@
 	   "mas=s"
 	   );
 
-my %NDSem=(0, __"Monday", 1, __"Tuesday", 2, __"Wednesday", 3, __"Thursday", 4, __"Friday", 5, __"Saturday", 6, __"Sunday");
+my %NDSem=(0, "Monday", 1, "Tuesday", 2, "Wednesday", 3, "Thursday", 4, "Friday", 5, "Saturday", 6, "Sunday");
 
-@ARGV < 2 or die __"Many arguments!\n";
+@ARGV < 2 or die "Many arguments!\n";
 if( $opt_mas ne "" ){
     MasInfo($opt_mas);
     exit(0);
@@ -109,7 +109,7 @@
 
 if( ($era,$y,$m,$d,$hora)
     = ( $fecha =~ /^\((aC|AD),([-0-9]+),(\d+),(\d+),((\d+):(\d+):(\d+)|md)\)$/ ) ){
-    $y > 0 or die __x ("Year {y} no found in the scale Christian.\n", 'y' => $y);
+    $y > 0 or die "Year $y no found in the scale Christian.\n";
     $y=1-$y if $era =~ /aC/;
     if( $hora =~ /md/ ){
 	($h, $mn, $s)=(12, 0, 0);
@@ -118,8 +118,8 @@
     }
 }elsif( ($era,$y,$m,$d,$cal0,$cal) 
        = ( $fecha =~ /^\((aC|AD),([-0-9]+),(\d+),(\d+),(jul|greg),(jul|greg)\)$/ ) ){
-    $cal0 ne $cal or die __"Conversion between calendars equals!!!\n";
-    $y > 0 or die __x ("Year {y} no found in the scale Christian.\n", 'y' => $y);
+    $cal0 ne $cal or die "Conversion between calendars equals!!!\n";
+    $y > 0 or die "Year $y no found in the scale Christian.\n";
     $y=1-$y if $era =~ /aC/;
 }elsif( ($fecha) = ( $fecha =~ /^\(([-0-9]+(?:\.\d*|))\)$/ ) ){
 #   Parte entera y fraccional de FJ
@@ -133,7 +133,7 @@
     $ndj++ if $fdj >= 0.5;
     $fdj-- if $fdj >= 0.5;
 }else{
-    die __"Bad input date!\n";
+    die "Bad input date!\n";
 }
 
 #-----------------------------------------------------------------------------
@@ -143,12 +143,12 @@
 sub Hoy2FJ{
     ($s,$mn,$h,$d,$m,$y,$dsem,@dti)=gmtime(time);
     $m++;  $y+=1900;  $dsem=($dsem+6)%7;  @dti=();
-    print __x (" Date present: {dsem}, {y}-{m}-{d},", 'dsem' => $NDSem{$dsem}, 'y'=>$y, 'm'=>$m, 'd'=>$d);
+    print " Date present: $NDSem{$dsem}, $y-$m-$d,";
     printf " %02d:%02d:%02d UT\n", $h, $mn, $s;
     $FJ=&DJ($y,$m,$d);
     $FJ+=($h+($mn+$s/60)/60)/24-0.5;
     printf " JD = %.5f\n", $FJ;
-    print __x (" For more information: {PROG} --help\n", 'PROG' => $PROG);
+    print " For more information: $PROG --help\n";
 }
 
 # Conversion fecha calendario civil -> fecha juliana
@@ -179,7 +179,7 @@
 if( $opt_FJ2jul ){
     ($era,$y,$m,$d,$dsem) = &DJ2CalJul($ndj);
     ($h,$mn,$s) = &fd2hora($fdj);
-    print __x (" Data: {dsem}, {era} {y}-{m}-{d},", 'dsem' => $NDSem{$dsem}, 'era'=>$era, 'y'=>$y, 'm'=>$m, 'd'=>$d);
+    print " Data: $NDSem{$dsem}, $era $y-$m-$d,";
     printf " %02d:%02d:%02d UT\n", $h, $mn, $s;   
     exit(0);
 }
@@ -188,7 +188,7 @@
 if( $opt_FJ2greg ){
     ($era,$y,$m,$d,$dsem) = &DJ2CalGregor($ndj);
     ($h,$mn,$s) = &fd2hora($fdj);
-    print __x (" Data: {dsem}, {era} {y}-{m}-{d},", 'dsem' => $NDSem{$dsem}, 'era'=>$era, 'y'=>$y, 'm'=>$m, 'd'=>$d);
+    print " Data: $NDSem{$dsem}, $era $y-$m-$d,";
     printf " %02d:%02d:%02d UT\n", $h, $mn, $s;
     exit(0);
 }
@@ -219,7 +219,7 @@
 	($era,$y,$m,$d,$dsem) = &DJ2CalJul($ndj);
     }
     ($h,$mn,$s) = &fd2hora($fdj);
-    print __x (" Data: {dsem}, {era} {y}-{m}-{d},", 'dsem' => $NDSem{$dsem}, 'era'=>$era, 'y'=>$y, 'm'=>$m, 'd'=>$d);
+    print " Data: $NDSem{$dsem}, $era $y-$m-$d,";
     printf " %02d:%02d:%02d UT\n", $h, $mn, $s;
     exit(0);
 }
@@ -230,14 +230,14 @@
     if( $cal0 eq "jul" ){
 	$dj0 = &DiasEntreRJul(-4712,1,1,$y,$m,$d);
 	($era,$y,$m,$d,$dsem) = &DJ2CalGregor($dj0);
-	print __x (" Data: ({era},{y},{m},{d})\n", 'era'=>$era, 'y'=>$y, 'm'=>$m, 'd'=>$d);
+	print " Data: ($era,$y,$m,$d)\n";
 	exit(0);
     }
 #   greg->jul
     if( $cal0 eq "greg" ){
 	$dj0 = &DiasEntreRGreg(-4713,11,24,$y,$m,$d);
 	($era,$y,$m,$d,$dsem) = &DJ2CalJul($dj0);
-	print __x (" Data: ({era},{y},{m},{d})\n", 'era'=>$era, 'y'=>$y, 'm'=>$m, 'd'=>$d);
+	print " Data: ($era,$y,$m,$d)\n";
 	exit(0);
     }
 }
@@ -342,8 +342,8 @@
 	elsif( $fcut>286 ){ # fcut > 14 Oct 1582
 	    $DJ0+=&DiasEntreRGreg(1582,10,14,$yy,$mm,$dd)+2299160;
 	}else{              # 5 Oct 1582 <= fcut <=  14 Oct 1582
-	    print __" Dates between 5 and 14 of October of 1582 no\n";
-	    print __" exist for calculus of the Julian Day.\n";
+	    print " Dates between 5 and 14 of October of 1582 no\n";
+	    print " exist for calculus of the Julian Day.\n";
 	    exit(0);
 	}
     }
@@ -442,7 +442,7 @@
     my $arg = shift;
   INFO: {
       if( $arg =~ /^arg$/ ){
-	  print __ <<"END_INFO";
+	  print <<"END_INFO";
   Arguments
  Note: writing quotes ("") is obligatory for input of arguments.
  'era':= The position of the year in the Christian scale. With 'aC' denotes
@@ -463,7 +463,7 @@
     last INFO;
       }
       if( $arg =~ /^calc2FJ$/ ){
-	  print __ <<"END_INFO";
+	  print <<"END_INFO";
   --calc2FJ "(era,yy,mm,dd,tt)"
  Calculation of Julian date from a calendar date used in the
  Christian or Western culture. This function assumes the calendars
@@ -477,7 +477,7 @@
     last INFO;
       }
       if( $arg =~ /^jul2FJ$/ ){
-	  print __ <<"END_INFO";
+	  print <<"END_INFO";
   --jul2FJ "(era,yy,mm,dd,tt)"
  Calculation of Julian date from a Julian calendar date.
  The function assumes only the Julian calendar.
@@ -485,7 +485,7 @@
     last INFO;
       }
       if( $arg =~ /^greg2FJ$/ ){
-	  print __ <<"END_INFO";
+	  print <<"END_INFO";
   --greg2FJ "(era,yy,mm,dd,tt)"
  Calculation of Julian date from a Gregorian calendar date.
  The function assumes only the Gregorian calendar.
@@ -493,7 +493,7 @@
     last INFO;
       }
       if( $arg =~ /^FJ2jul$/ ){
-	  print __ <<"END_INFO";
+	  print <<"END_INFO";
   --FJ2jul "(jd)"
  Calculation of a Julian calendar date, time and day of the week
  from a Julian date. It gives the date with format day of week,
@@ -502,7 +502,7 @@
     last INFO;
       }
       if( $arg =~ /^FJ2greg$/ ){
-	  print __ <<"END_INFO";
+	  print <<"END_INFO";
   --FJ2greg "(jd)"
  Calculation of a Gregorian calendar date, time and day of the week
  from a Julian date. It gives the date with format day of week,
@@ -511,7 +511,7 @@
     last INFO;
       }
       if( $arg =~ /^calc2FJM$/ ){
-	  print __ <<"END_INFO";
+	  print <<"END_INFO";
   --calc2FJM "(era,yy,mm,dd,tt)"
  Calculation of modified Julian date from a Western calendar date.
  This function is valid for any era.
@@ -519,7 +519,7 @@
     last INFO;
       }
       if( $arg =~ /^FJM2calc$/ ){
-	  print __ <<"END_INFO";
+	  print <<"END_INFO";
   --FJM2calc "(mjd)"
  Calculation of a Western calendar date, time and day of the week
  from a modified Julian date. It gives the date with format day of
@@ -528,7 +528,7 @@
     last INFO;
       }
       if( $arg =~ /^convcal$/ ){
-	  print __ <<"END_INFO";
+	  print <<"END_INFO";
   --convcal "(era,yy,mm,dd,cal1,cal2)"
  Conversion between calendar date 'cal1' to calendar date 'cal2'. The
  conversion is made between Julian 'jul' and Gregorian 'greg' calendars
@@ -537,7 +537,7 @@
     last INFO;
       }
       if( $arg =~ /^mas$/ ){
-	  print __ <<"END_INFO";
+	  print <<"END_INFO";
   --mas 'fun'
  Show additional information about function 'fun', where 'fun' is one of
  the options: 'calc2FJ|jul2FJ|greg2FJ|FJ2jul|FJ2greg|calc2FJM|FJM2calc|
@@ -548,7 +548,7 @@
     last INFO;
       }
       if( $arg ne "" ){
-	  die __x ("There is not information for: '{arg}'\n", 'arg' => $arg);
+	  die "There is not information for: '$arg'\n";
       }
   }
 }
@@ -557,22 +557,23 @@
 #   Version
 #-----------------------------------------------------------------------------
 sub vtxt{
-    print "$InfoId\n";
-    print "Copyright (C) 2013-2018 $autor\n";
-    print __ <<"END_VERSION";
+    print STDOUT <<"END_VERSION";
+$InfoId
+Copyright (C) 2013-2018 $autor
 License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
 This program comes with ABSOLUTELY NO WARRANTY; This is free software, and you
 are welcome to redistribute it under certain conditions.
+
+$InfoAp
 END_VERSION
-    print "\n$InfoAp\n";
 }
 
 #-----------------------------------------------------------------------------
 #   Uso, funciones y opciones
 #-----------------------------------------------------------------------------
 sub usotxt{
-    print __x ("Use: {PROG} --Function \"Arguments\"\n", PROG => $PROG);
-    print __ <<"END_KALENDAS";
+    print STDOUT <<"END_KALENDAS";
+Use: $PROG --Function \"Arguments\"
  Arguments: 'era' is the position of the year in the Christian scale: 'aC|AD',
              'yy' year, 'mm' month (1-12) and 'dd' day, 'tt' hour in UT
              or noon of Greenwich: 'hh:mm:ss|md'. 'jd' is the Julian date,
@@ -600,8 +601,8 @@
    Show additional information about function fun; arg show arguments.
  -h,--help    Show this help.       -v,--version    Show version.
  JD present!  For calculate Julian date present, from PC clock, write
+              $PROG without arguments.
 END_KALENDAS
-    print __x ("              {PROG} without arguments.\n", PROG => $PROG);
 }
 
 # __FIN__
